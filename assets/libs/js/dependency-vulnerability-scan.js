import { scan } from './app.js';


document.addEventListener('DOMContentLoaded', function() {
    const submitBtn = document.getElementById('submitBtn');
    const loadingOverlay = document.getElementById('loadingOverlay');
    const directoryForm = document.getElementById('directoryForm');

    submitBtn.addEventListener('click', async function(e) {
        e.preventDefault();
        const directoryPath = document.getElementById('directoryPath').value;
        
        if (!directoryPath) {
            alert('Please enter a directory path');
            return;
        }

        loadingOverlay.style.display = 'block';
        try {
            const scanResult = await scan(directoryPath);
            console.log("Scan completed successfully");
            await fetchVulnerabilities();
        } catch (error) {
            console.error('Scan failed:', error);
        } finally {
            loadingOverlay.style.display = 'none';
        }
    });
});


async function fetchVulnerabilities() {
    try {
        const response = await fetch('http://localhost:3000/api/vulnerabilities/scan-result');
        const data = await response.json();
        
        if (data.length > 0) {
            const tbody = document.getElementById('vulnerabilitiesScanResults');
            tbody.innerHTML = '';
            
            data.forEach((vuln, index) => {
                // Define severity class for badge
                const severityClass = getSeverityClass(vuln.severity);
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${vuln.cve_id}</td>

                    <td>${vuln.package_url}</td>
                    <td>${vuln.affected_version}</td>
                    <td>
                        <span class="badge-dot ${severityClass} mr-1"></span>
                        ${vuln.severity}
                    </td>
                    <td>${vuln.cvss_score}</td>
                    <td>${vuln.fix_version}</td>
                    <td>${vuln.recommendation}</td>
                    <td>${vuln.insights}</td>
                `;
                tbody.appendChild(row);
            });
        }
    } catch (error) {
        console.error('Error fetching vulnerabilities:', error);
        const tbody = document.getElementById('vulnerabilitiesBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center">
                    Error loading vulnerability data. Please try again later.
                </td>
            </tr>
        `;
    }
}

function getSeverityClass(severity) {
    switch (severity.toLowerCase()) {
        case 'critical':
        case 'high':
            return 'badge-danger';
        case 'medium':
            return 'badge-warning';
        case 'low':
            return 'badge-success';
        default:
            return 'badge-info';
    }
}
